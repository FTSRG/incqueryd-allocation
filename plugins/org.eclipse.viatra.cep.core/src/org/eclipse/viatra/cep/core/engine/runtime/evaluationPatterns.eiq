/*******************************************************************************
 * Copyright (c) 2004-2014, Istvan David, Istvan Rath and Daniel Varro
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Istvan David - initial API and implementation
 *******************************************************************************/
package org.eclipse.viatra.cep.core.engine.runtime

import "cep.meta"
import "automaton.meta"
import "http://www.eclipse.org/emf/2002/Ecore"

pattern finishedAutomaton(automaton : Automaton, et : EventToken) {
	Automaton.states(automaton, state);
	find finalState(state, et);
	EventToken.currentState(_, state);
}

pattern finalState(state : State, eventToken : EventToken) {
	State.label(state, label);
	State.eventTokens(state, eventToken);
	check(label.equalsIgnoreCase("final"));
}

pattern latestEvent(event : Event) {
	InternalModel.latestEvent(_, event);
}

pattern preState(transition : TypedTransition, state : State) {
	TypedTransition.preState(transition, state);
}

pattern guardAtomicPattern(guard : Guard, atomicPattern : AtomicEventPattern) {
	Guard.eventType(guard, atomicPattern);
}

pattern eventProcessedByEventToken(event : Event, eventToken : EventToken) {
	EventToken.lastProcessed(eventToken, event);
}

pattern eventProcessed(event : Event) {
	Event.isProcessed(event, true);
}

pattern atomicPatternType(atomicEventPattern : AtomicEventPattern, type : EString) {
	AtomicEventPattern.type(atomicEventPattern, type);
}

pattern enabledTransition(transition : TypedTransition, eventToken : EventToken, event : Event) {
	find latestEvent(event);
	Event.type(event, eventType);
	TypedTransition.guard.eventType.type(transition, eventType);
	TypedTransition.preState.eventTokens(transition, eventToken);
	neg find eventProcessedByEventToken(event, eventToken);
}

pattern tokenInTrapState(eventToken : EventToken) {
	TrapState.eventTokens(_, eventToken);
}

pattern initState(state : InitState) {
	InitState(state);
}

pattern partiallyMatchedEventPattern(eventToken : EventToken, state : State) {
	State.eventTokens(state, eventToken);
	neg find initState(state);
}

pattern epsilonTransitionBetweenStates(transition : EpsilonTransition, state1 : State, state2 : State) {
	State.outTransitions(state1, transition);
	State.inTransitions(state2, transition);
}

pattern tokenEntersTimedZone(eventToken : EventToken, state : State, timedZone : TimedZone) {
	EventToken.currentState(eventToken, state);
	State.inStateOf(state, timedZone);
}

pattern tokenLeavesTimedZone(eventToken : EventToken, state : State, timedZone : TimedZone) {
	EventToken.currentState(eventToken, state);
	EventToken.timedZones(eventToken, timedZone);
	State.outStateOf(state, timedZone);
}

pattern tokenInTimedZone(eventToken : EventToken, state : State, timedZone : TimedZone) {
	EventToken.currentState(eventToken, state);
	State.inStateOf(state, timedZone);
}